# -*- coding: utf-8 -*-

import os
import logging
import tempfile
from pathlib import Path

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from spotdl import Spotdl

# --- –ù–ê–°–¢–†–û–ô–ö–ò –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
# –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã –±—É–¥–µ—Ç–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Render, –∞ –Ω–µ –≤ –∫–æ–¥–µ
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SPOTIFY_CLIENT_ID = os.getenv("SPOTIFY_CLIENT_ID")
SPOTIFY_CLIENT_SECRET = os.getenv("SPOTIFY_CLIENT_SECRET")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã
if not all([TELEGRAM_TOKEN, SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET]):
    raise ValueError(
        "–û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: "
        "TELEGRAM_TOKEN, SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET"
    )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


# --- –§–£–ù–ö–¶–ò–ò-–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ –∏–∑ Spotify.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫, –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª."
    )
    await update.message.reply_html(welcome_message)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        "–ß—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ –∏–∑ Spotify.\n"
        "–Ø –Ω–∞–π–¥—É –µ–≥–æ, —Å–∫–∞—á–∞—é –∏ –ø—Ä–∏—à–ª—é –≤–∞–º –≤ –≤–∏–¥–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞."
    )
    await update.message.reply_text(help_text)


async def download_track(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ."""
    message = update.message
    url = message.text

    if "spotify.com/track/" not in url:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Spotify.")
        return

    status_message = await message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É...")

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.
    # –û–Ω–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–ª–æ–∫–∞ 'with'.
    with tempfile.TemporaryDirectory() as temp_dir:
        try:
            temp_path = Path(temp_dir)
            await status_message.edit_text("üîç –ò—â—É –∏ —Å–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Spotdl –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏
            spotdl_client = Spotdl(
                client_id=SPOTIFY_CLIENT_ID,
                client_secret=SPOTIFY_CLIENT_SECRET,
                output_format="mp3",
                output=str(temp_path), # –£–∫–∞–∑—ã–≤–∞–µ–º, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–∞–π–ª
                # ffmpeg –∑–¥–µ—Å—å –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º, spotdl –Ω–∞–π–¥–µ—Ç –µ–≥–æ —Å–∞–º, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∏–ª–¥–ø–∞–∫–æ–º
            )

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫
            songs = spotdl_client.download([url])

            if not songs or not songs[0].downloaded_at:
                await status_message.edit_text("üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —ç—Ç–æ—Ç —Ç—Ä–µ–∫. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.")
                return

            song = songs[0]
            # –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –Ω–∞—à–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            downloaded_files = list(temp_path.glob("*.mp3"))
            if not downloaded_files:
                raise FileNotFoundError("–°–∫–∞—á–∞–Ω–Ω—ã–π mp3 —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
            
            output_file = downloaded_files[0]

            await status_message.edit_text("‚úÖ –¢—Ä–µ–∫ —Å–∫–∞—á–∞–Ω! –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ—Ñ–∞–π–ª...")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
            with open(output_file, 'rb') as audio_file:
                await context.bot.send_audio(
                    chat_id=message.chat_id,
                    audio=audio_file,
                    title=song.title,
                    performer=song.artist,
                    duration=int(song.duration or 0),
                    thumbnail=song.cover_url
                )

        except Exception as e:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ {url}: {e}", exc_info=True)
            await status_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        finally:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
             await status_message.delete()
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –∏ —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏ –Ω–µ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞—é—Ç—Å—è –∑–¥–µ—Å—å


# --- –û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨ –ë–û–¢–ê ---

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, download_track))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    application.run_polling()


if __name__ == "__main__":
    main()