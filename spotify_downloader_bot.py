import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import FSInputFile
from spotdl import Spotdl
from spotdl.types.song import Song

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ë–µ—Ä–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# —Å–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ spotdl
spotdl_client = Spotdl()


async def download_track(url: str) -> str | None:
    try:
        song: Song = await spotdl_client.song.from_url(url)
        path = await spotdl_client.downloader.download_song(song)
        return path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞: {e}")
        return None


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Spotify, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è üéµ")


@dp.message()
async def handle_message(message: types.Message):
    url = message.text.strip()
    if "open.spotify.com/track" not in url:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Spotify üéß")
        return

    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

    file_path = await download_track(url)
    if file_path and os.path.exists(file_path):
        audio = FSInputFile(file_path)
        await message.answer_audio(audio)
        os.remove(file_path)  # —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())