import os
import asyncio
import logging
import subprocess
from aiogram import Bot, Dispatcher, types
from aiogram.types import FSInputFile

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("TELEGRAM_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()


# üì• –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ —á–µ—Ä–µ–∑ spotdl (CLI)
async def download_track(url: str, output_dir: str = "downloads") -> str:
    os.makedirs(output_dir, exist_ok=True)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É spotdl
    cmd = ["spotdl", "download", url, "--output", output_dir]

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    process = await asyncio.create_subprocess_exec(
        *cmd,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    stdout, stderr = await process.communicate()

    if process.returncode != 0:
        logging.error(f"–û—à–∏–±–∫–∞ spotdl: {stderr.decode()}")
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {stderr.decode()}")

    # –ù–∞—Ö–æ–¥–∏–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ
    files = os.listdir(output_dir)
    if not files:
        raise Exception("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    return os.path.join(output_dir, files[0])


# üì≤ –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
@dp.message()
async def handle_message(message: types.Message):
    url = message.text.strip()
    if not url.startswith("http"):
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Spotify üéµ")
        return

    await message.answer("–°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫, –ø–æ–¥–æ–∂–¥–∏... ‚è≥")

    try:
        file_path = await download_track(url)
        audio = FSInputFile(file_path)
        await message.answer_audio(audio)
        os.remove(file_path)  # —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())