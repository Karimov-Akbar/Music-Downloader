import asyncio
import os
from spotdl import Spotdl
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç SpotDL (–æ–Ω —Å–∞–º –ø–æ–¥—Ç—è–Ω–µ—Ç –Ω—É–∂–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã)
spotdl = Spotdl()

async def download_song(url: str) -> str:
    """–°–∫–∞—á–∞—Ç—å –ø–µ—Å–Ω—é –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    songs = await spotdl.search([url])
    if not songs:
        return None
    file = await spotdl.download(songs[0])
    return file

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Å–Ω—é –≤ Spotify üéµ")

@dp.message_handler()
async def handle_message(message: types.Message):
    url = message.text.strip()

    if "spotify.com" not in url:
        await message.reply("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Spotify üôÇ")
        return

    await message.reply("–°–∫–∞—á–∏–≤–∞—é... ‚è≥")

    try:
        file_path = await download_song(url)
        if file_path:
            await message.reply_document(open(file_path, "rb"))
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ üò¢")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    # aiogram —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ asyncio, —Ç–∞–∫ —á—Ç–æ –≤—Å—ë –æ–∫
    executor.start_polling(dp, skip_updates=True)