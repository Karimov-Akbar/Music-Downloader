import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from yt_dlp import YoutubeDL
from spotdl.providers.spotify import SpotifyClient
from spotdl import Song

TOKEN = os.getenv("TELEGRAM_TOKEN")
SPOTIFY_CLIENT_ID = os.getenv("SPOTIFY_CLIENT_ID")
SPOTIFY_CLIENT_SECRET = os.getenv("SPOTIFY_CLIENT_SECRET")

if not TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not SPOTIFY_CLIENT_ID or not SPOTIFY_CLIENT_SECRET:
    raise ValueError("‚ùå SPOTIFY_CLIENT_ID –∏–ª–∏ SPOTIFY_CLIENT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Spotify (–≤–∞–∂–Ω–æ!)
SpotifyClient.init(
    client_id=SPOTIFY_CLIENT_ID,
    client_secret=SPOTIFY_CLIENT_SECRET,
    user_auth=False
)

bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üé∂ –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –∏–∑ Spotify, –∏ —è –ø–æ–ø—Ä–æ–±—É—é —Å–∫–∞—á–∞—Ç—å –µ–≥–æ.")

@dp.message()
async def download_track(message: types.Message):
    url = message.text.strip()

    if not url.startswith("https://open.spotify.com/"):
        await message.answer("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É Spotify.")
        return

    await message.answer("–°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫, –ø–æ–¥–æ–∂–¥–∏... ‚è≥")

    try:
        # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–µ—Å–Ω–∏
        song = Song.from_url(url)
        output_file = f"{song.display_name}.mp3"

        # –∫–∞—á–∞–µ–º —á–µ—Ä–µ–∑ yt-dlp –ø–æ youtube_url
        ydl_opts = {
            "format": "bestaudio/best",
            "outtmpl": output_file,
            "quiet": True,
            "noplaylist": True,
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }],
        }

        with YoutubeDL(ydl_opts) as ydl:
            ydl.download([song.youtube_url])

        if os.path.exists(output_file):
            await message.answer_document(types.FSInputFile(output_file))
            os.remove(output_file)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())