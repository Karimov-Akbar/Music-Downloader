import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from spotdl import Spotdl
import os

# —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç spotdl
spotdl = Spotdl()

@dp.message(commands=["start"])
async def start_cmd(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Spotify üéµ")

@dp.message()
async def download_track(message: Message):
    url = message.text.strip()

    await message.answer("–°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫, –ø–æ–¥–æ–∂–¥–∏... ‚è≥")
    try:
        # –∏—â–µ–º —Ç—Ä–µ–∫
        search_results = spotdl.search([url])
        if not search_results:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ –ø–æ —Å—Å—ã–ª–∫–µ ‚ùå")
            return

        song = search_results[0]
        file_path = spotdl.download(song)

        if file_path and os.path.exists(file_path):
            await message.answer_document(open(file_path, "rb"))
            os.remove(file_path)
        else:
            await message.answer("–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
