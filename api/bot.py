import os
import json
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from spotdl import Spotdl
import tempfile
import asyncio

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Spotdl
spotdl = Spotdl(client_id=os.getenv('SPOTIFY_CLIENT_ID'), 
                client_secret=os.getenv('SPOTIFY_CLIENT_SECRET'))

# Telegram Bot Token
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await update.message.reply_text(
        'üéµ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏.\n\n'
        '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ:\n'
        '‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏\n'
        '‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ Spotify —Ç—Ä–µ–∫\n'
        '‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ YouTube\n\n'
        '–Ø –Ω–∞–π–¥—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –º—É–∑—ã–∫—É!'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    await update.message.reply_text(
        'üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n\n'
        '1. –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n'
        '2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ Spotify/YouTube\n'
        '3. –ü–æ–ª—É—á–∏ –º—É–∑—ã–∫—É!\n\n'
        '–ü—Ä–∏–º–µ—Ä—ã:\n'
        '‚Ä¢ "Imagine Dragons Believer"\n'
        '‚Ä¢ https://open.spotify.com/track/...'
    )

async def download_music(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏"""
    user_input = update.message.text
    chat_id = update.message.chat_id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    status_msg = await update.message.reply_text('üîç –ò—â—É –º—É–∑—ã–∫—É...')
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        with tempfile.TemporaryDirectory() as temp_dir:
            # –ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            songs = spotdl.search([user_input])
            
            if not songs:
                await status_msg.edit_text('‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.')
                return
            
            song = songs[0]
            await status_msg.edit_text(f'‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é: {song.name} - {song.artist}...')
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫
            downloaded, errors = spotdl.download(song)
            
            if errors:
                await status_msg.edit_text(f'‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {errors[0]}')
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            file_path = downloaded[0] if downloaded else None
            
            if file_path and os.path.exists(file_path):
                await status_msg.edit_text('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...')
                
                with open(file_path, 'rb') as audio:
                    await context.bot.send_audio(
                        chat_id=chat_id,
                        audio=audio,
                        title=song.name,
                        performer=song.artist,
                        duration=song.duration
                    )
                
                await status_msg.delete()
            else:
                await status_msg.edit_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.')
                
    except Exception as e:
        await status_msg.edit_text(f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')

# –î–ª—è Vercel webhook
async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è Vercel"""
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, download_music))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await application.initialize()
    await application.start()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    body = await request.json()
    update = Update.de_json(body, application.bot)
    await application.process_update(update)
    
    return {"statusCode": 200}

# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, download_music))
    
    print('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()