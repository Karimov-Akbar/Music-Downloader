import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio
from dotenv import load_dotenv
import yt_dlp
import tempfile
import glob

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# Telegram Bot Token
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await update.message.reply_text(
        'üéµ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏.\n\n'
        '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ:\n'
        '‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏\n'
        '‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ YouTube\n'
        '‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ Spotify (–Ω–∞–π–¥—É –Ω–∞ YouTube)\n\n'
        '–Ø –Ω–∞–π–¥—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –º—É–∑—ã–∫—É!'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    await update.message.reply_text(
        'üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n\n'
        '1. –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n'
        '2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube/Spotify\n'
        '3. –ü–æ–ª—É—á–∏ –º—É–∑—ã–∫—É!\n\n'
        '–ü—Ä–∏–º–µ—Ä—ã:\n'
        '‚Ä¢ "Imagine Dragons Believer"\n'
        '‚Ä¢ https://www.youtube.com/watch?v=...\n'
        '‚Ä¢ https://open.spotify.com/track/...'
    )

def download_track(query):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ —á–µ—Ä–µ–∑ yt-dlp"""
    try:
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = tempfile.mkdtemp()
        output_template = os.path.join(temp_dir, '%(title)s.%(ext)s')
        
        # –ï—Å–ª–∏ —ç—Ç–æ Spotify —Å—Å—ã–ª–∫–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∏—â–µ–º –Ω–∞ YouTube
        if 'spotify.com' in query:
            try:
                import re
                from spotipy import Spotify
                from spotipy.oauth2 import SpotifyClientCredentials
                
                # –ü–æ–ª—É—á–∞–µ–º track ID –∏–∑ —Å—Å—ã–ª–∫–∏
                track_id = re.search(r'track/([a-zA-Z0-9]+)', query)
                if track_id:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Spotify API
                    sp = Spotify(auth_manager=SpotifyClientCredentials(
                        client_id=os.getenv('SPOTIFY_CLIENT_ID'),
                        client_secret=os.getenv('SPOTIFY_CLIENT_SECRET')
                    ))
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
                    track = sp.track(track_id.group(1))
                    artist = track['artists'][0]['name']
                    title = track['name']
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è YouTube
                    query = f"{artist} - {title}"
                    print(f"Spotify —Ç—Ä–µ–∫: {query}")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ –∏–∑ Spotify: {e}")
                return None, None, None, None, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å Spotify —Å—Å—ã–ª–∫—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FFmpeg (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
        import shutil
        has_ffmpeg = shutil.which('ffmpeg') is not None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp
        ydl_opts = {
            'format': 'bestaudio/best',
            'outtmpl': output_template,
            'quiet': True,
            'no_warnings': True,
            'extract_flat': False,
            'default_search': 'ytsearch1',
            'socket_timeout': 30,
            'retries': 3,
            'fragment_retries': 3,
            'extractor_retries': 3,
            'http_headers': {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Language': 'en-us,en;q=0.5',
                'Sec-Fetch-Mode': 'navigate'
            },
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            'extractor_args': {
                'youtube': {
                    'player_client': ['android', 'web'],
                    'skip': ['hls', 'dash']
                }
            },
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å cookies –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            'cookiesfrombrowser': ('chrome',) if has_ffmpeg else None,
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ MP3 —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å FFmpeg
        if has_ffmpeg:
            ydl_opts['postprocessors'] = [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }]
        
        print(f"–°–∫–∞—á–∏–≤–∞—é: {query}")
        print(f"FFmpeg –¥–æ—Å—Ç—É–ø–µ–Ω: {has_ffmpeg}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        search_queries = [
            query,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            f"ytsearch:{query}",  # YouTube –ø–æ–∏—Å–∫
            f"ytsearch1:{query} audio",  # YouTube —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º "audio"
        ]
        
        last_error = None
        
        for search_query in search_queries:
            try:
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    # –°–∫–∞—á–∏–≤–∞–µ–º
                    info = ydl.extract_info(search_query, download=True)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
                    if 'entries' in info:
                        # –≠—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
                        info = info['entries'][0]
                    
                    title = info.get('title', 'Unknown')
                    artist = info.get('artist', info.get('uploader', 'Unknown'))
                    duration = info.get('duration', 0)
                    
                    # –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª (mp3, m4a, webm, opus)
                    audio_files = []
                    for ext in ['*.mp3', '*.m4a', '*.webm', '*.opus']:
                        audio_files.extend(glob.glob(os.path.join(temp_dir, ext)))
                    
                    if audio_files:
                        return audio_files[0], title, artist, duration, None
                    
            except Exception as e:
                last_error = str(e)
                print(f"–û—à–∏–±–∫–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º '{search_query}': {e}")
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
        if last_error:
            if 'Sign in to confirm' in last_error or 'bot' in last_error.lower():
                return None, None, None, None, "YouTube –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –ø–µ—Å–Ω—é –∏–ª–∏ –ø–æ–∑–∂–µ."
            return None, None, None, None, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: {last_error[:200]}"
        
        return None, None, None, None, "–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω"
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return None, None, None, None, str(e)

async def download_music(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏"""
    user_input = update.message.text
    chat_id = update.message.chat_id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    status_msg = await update.message.reply_text('üîç –ò—â—É –º—É–∑—ã–∫—É...')
    
    try:
        await status_msg.edit_text('‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é...')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        file_path, title, artist, duration, error = await asyncio.to_thread(
            download_track, user_input
        )
        
        if error:
            await status_msg.edit_text(f'‚ùå –û—à–∏–±–∫–∞: {error[:150]}')
            return
        
        if not file_path or not os.path.exists(file_path):
            await status_msg.edit_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫.')
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(file_path)
        
        # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 50 –ú–ë –¥–ª—è –±–æ—Ç–æ–≤
        if file_size > 50 * 1024 * 1024:
            await status_msg.edit_text('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>50 –ú–ë)')
            try:
                os.remove(file_path)
            except:
                pass
            return
        
        await status_msg.edit_text('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        with open(file_path, 'rb') as audio:
            await context.bot.send_audio(
                chat_id=chat_id,
                audio=audio,
                title=title,
                performer=artist,
                duration=duration,
                read_timeout=120,
                write_timeout=120,
                connect_timeout=120
            )
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        try:
            os.remove(file_path)
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            import shutil
            temp_dir = os.path.dirname(file_path)
            shutil.rmtree(temp_dir, ignore_errors=True)
        except:
            pass
        
        await status_msg.delete()
            
    except Exception as e:
        error_msg = str(e)
        await status_msg.edit_text(f'‚ùå –û—à–∏–±–∫–∞: {error_msg[:150]}')

# –î–ª—è Vercel webhook - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
def webhook_handler_sync(body):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è Vercel"""
    import asyncio
    
    async def process():
        application = Application.builder().token(TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, download_music))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await application.initialize()
        await application.start()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        update = Update.de_json(body, application.bot)
        await application.process_update(update)
        
        await application.stop()
        
        return {"statusCode": 200}
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–æ–≤–æ–º event loop
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        return loop.run_until_complete(process())
    finally:
        loop.close()

# –°—Ç–∞—Ä—ã–π async webhook handler (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è Vercel"""
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, download_music))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await application.initialize()
    await application.start()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    body = await request.json()
    update = Update.de_json(body, application.bot)
    await application.process_update(update)
    
    return {"statusCode": 200}

# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏ Render.com
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, download_music))
    
    print('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    print(f'üåê –†–µ–∂–∏–º: Polling (–¥–ª—è Render.com)')
    
    # –î–ª—è Render Web Service - –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import threading
    from http.server import HTTPServer, BaseHTTPRequestHandler
    
    class HealthCheckHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'Bot is running!')
        
        def log_message(self, format, *args):
            pass  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    
    def run_http_server():
        port = int(os.getenv('PORT', 10000))
        server = HTTPServer(('0.0.0.0', port), HealthCheckHandler)
        print(f'üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}')
        server.serve_forever()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    http_thread = threading.Thread(target=run_http_server, daemon=True)
    http_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True
    )

if __name__ == '__main__':
    main()