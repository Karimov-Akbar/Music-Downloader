import os
import logging
from uuid import uuid4
from pathlib import Path
from dotenv import load_dotenv

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from spotdl import Spotdl

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å TELEGRAM_TOKEN –≤ —Ñ–∞–π–ª–µ .env")

DOWNLOAD_PATH = Path("./downloads")
DOWNLOAD_PATH.mkdir(exist_ok=True)

spotdl_client = Spotdl(
    client_id=os.getenv("SPOTIFY_CLIENT_ID"),
    client_secret=os.getenv("SPOTIFY_CLIENT_SECRET"),
    ffmpeg="/usr/bin/ffmpeg",
    output=f"{DOWNLOAD_PATH}/{{title}} - {{artist}}.mp3"
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫, –∞–ª—å–±–æ–º –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ Spotify, –∏ —è —Å–∫–∞—á–∞—é –º—É–∑—ã–∫—É –¥–ª—è —Ç–µ–±—è.",
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message_text = update.message.text
    if "open.spotify.com" not in message_text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Spotify.")
        return

    status_message = await update.message.reply_text("–ü–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É. –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É... ‚è≥")

    try:
        songs = spotdl_client.download([message_text])

        if not songs:
            await status_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ. üòî")
            return

        await status_message.edit_text(f"–°–∫–∞—á–∞–Ω–æ {len(songs)} —Ç—Ä–µ–∫(–æ–≤). –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª—ã... üöÄ")

        for song in songs:
            if song and song.path and os.path.exists(song.path):
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞: {song.path}")
                try:
                    await context.bot.send_audio(
                        chat_id=update.effective_chat.id,
                        audio=open(song.path, "rb"),
                        title=song.title,
                        performer=song.artist,
                        duration=int(song.duration),
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {song.path}: {e}")
                    await update.message.reply_text(f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {song.display_name}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.")
                finally:
                    os.remove(song.path)
            else:
                logger.warning(f"–§–∞–π–ª –¥–ª—è –ø–µ—Å–Ω–∏ {song.display_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        await status_message.edit_text("–í—Å–µ –≥–æ—Ç–æ–≤–æ! ‚úÖ")

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
        await status_message.edit_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É. üõ†Ô∏è")


def main() -> None:
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()